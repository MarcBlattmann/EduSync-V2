"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { 
  Bold, 
  Italic, 
  Underline, 
  List, 
  ListOrdered, 
  Heading1, 
  Heading2, 
  Heading3,
  Code,
  Link as LinkIcon,
  Unlink
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Editor } from '@tiptap/react';

interface NoteToolbarProps {
  editor: Editor | null;
  className?: string;
}

export function NoteToolbar({ editor, className }: NoteToolbarProps) {
  if (!editor) {
    return null;
  }
  
  return (
    <div className={cn("flex flex-wrap items-center gap-1 p-1 sm:p-2 border-b sticky top-0 bg-background z-10 overflow-x-auto", className)}>
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleBold().run()}
        title="Bold (Ctrl+B)"
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('bold') ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <Bold className="h-4 w-4" />
        <span className="sr-only">Bold</span>
      </Button>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleItalic().run()}
        title="Italic (Ctrl+I)"
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('italic') ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <Italic className="h-4 w-4" />
        <span className="sr-only">Italic</span>
      </Button>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleUnderline().run()}
        title="Underline (Ctrl+U)"
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('underline') ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <Underline className="h-4 w-4" />
        <span className="sr-only">Underline</span>
      </Button>
      
      <div className="w-px h-6 bg-border mx-1" />
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('heading', { level: 1 }) ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <Heading1 className="h-4 w-4" />
        <span className="sr-only">Heading 1</span>
      </Button>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('heading', { level: 2 }) ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <Heading2 className="h-4 w-4" />
        <span className="sr-only">Heading 2</span>
      </Button>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('heading', { level: 3 }) ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <Heading3 className="h-4 w-4" />
        <span className="sr-only">Heading 3</span>
      </Button>
      
      <div className="w-px h-6 bg-border mx-1" />
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleBulletList().run()}
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('bulletList') ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <List className="h-4 w-4" />
        <span className="sr-only">Bullet List</span>
      </Button>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleOrderedList().run()}
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('orderedList') ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <ListOrdered className="h-4 w-4" />
        <span className="sr-only">Numbered List</span>
      </Button>
      
      <div className="w-px h-6 bg-border mx-1" />
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => editor.chain().focus().toggleCode().run()}
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('code') ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <Code className="h-4 w-4" />
        <span className="sr-only">Code</span>
      </Button>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => {
          const url = window.prompt('URL');
          if (url) {
            editor.chain().focus().setLink({ href: url }).run();
          }
        }}
        className={cn(
          "h-8 w-8 p-0", 
          editor.isActive('link') ? "bg-accent text-accent-foreground" : ""
        )}
      >
        <LinkIcon className="h-4 w-4" />
        <span className="sr-only">Link</span>
      </Button>
      
      {editor.isActive('link') && (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => editor.chain().focus().unsetLink().run()}
          className="h-8 w-8 p-0"
        >
          <Unlink className="h-4 w-4" />
          <span className="sr-only">Unlink</span>
        </Button>
      )}
    </div>
  );
}
